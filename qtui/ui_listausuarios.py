# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'not-converted-ui\listausuarios.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import utils
from datetime import datetime
from utils import qtPopup

import re
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
      
def EmailCheck(email):  
    if(re.search(regex,email)):  
        return True
    else:  
        return False




class UiObject(object):
    def setupUi(self, Usuarios):
        Usuarios.setObjectName("Usuarios")
        Usuarios.resize(609, 378)
        Usuarios.setStyleSheet("background-color: rgb(29, 29, 29);")
        self.centralwidget = QtWidgets.QWidget(Usuarios)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 611, 381))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.lista = QtWidgets.QWidget()
        self.lista.setObjectName("lista")
        self.tableWidget = QtWidgets.QTableWidget(self.lista)
        self.tableWidget.setEnabled(True)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 611, 361))
        self.tableWidget.setStyleSheet("QTableWidget::item {\n"
"        color: #ffffff;                    \n"
"        background-color: rgb(29,29,29);\n"
"    }\n"
"QTableWidget::item:selected {\n"
"        background-color: blue;\n"
"    }")
        self.tableWidget.setDragEnabled(False)
        self.tableWidget.setDragDropOverwriteMode(True)
        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setGridStyle(QtCore.Qt.SolidLine)
        self.tableWidget.setWordWrap(True)
        self.tableWidget.setCornerButtonEnabled(True)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tabWidget.addTab(self.lista, "")
        self.usuario = QtWidgets.QWidget()
        self.usuario.setObjectName("usuario")
        self.entry_usuario = QtWidgets.QLineEdit(self.usuario)
        self.entry_usuario.setEnabled(False)
        self.entry_usuario.setGeometry(QtCore.QRect(130, 20, 211, 20))
        self.entry_usuario.setStyleSheet("QLineEdit {background-color: rgb(186, 186, 186);border-radius:5px} QLineEdit:focus {border: 1.5px solid #796868}")
        self.entry_usuario.setInputMask("")
        self.entry_usuario.setObjectName("entry_usuario")
        self.text_usuario = QtWidgets.QLabel(self.usuario)
        self.text_usuario.setGeometry(QtCore.QRect(20, 20, 51, 16))
        self.text_usuario.setStyleSheet("color: rgb(255, 255, 255);")
        self.text_usuario.setObjectName("text_usuario")
        self.entry_nome = QtWidgets.QLineEdit(self.usuario)
        self.entry_nome.setEnabled(True)
        self.entry_nome.setGeometry(QtCore.QRect(130, 50, 211, 20))
        self.entry_nome.setStyleSheet("QLineEdit {background-color: rgb(186, 186, 186);border-radius:5px} QLineEdit:focus {border: 1.5px solid #796868}")
        self.entry_nome.setInputMask("")
        self.entry_nome.setObjectName("entry_nome")
        self.text_nome = QtWidgets.QLabel(self.usuario)
        self.text_nome.setGeometry(QtCore.QRect(20, 50, 81, 16))
        self.text_nome.setStyleSheet("color: rgb(255, 255, 255);")
        self.text_nome.setObjectName("text_nome")
        self.text_data_nasc = QtWidgets.QLabel(self.usuario)
        self.text_data_nasc.setGeometry(QtCore.QRect(20, 80, 121, 16))
        self.text_data_nasc.setStyleSheet("color: rgb(255, 255, 255);")
        self.text_data_nasc.setObjectName("text_data_nasc")
        self.entry_cpf = QtWidgets.QLineEdit(self.usuario)
        self.entry_cpf.setEnabled(True)
        self.entry_cpf.setGeometry(QtCore.QRect(130, 110, 211, 20))
        self.entry_cpf.setStyleSheet("QLineEdit {background-color: rgb(186, 186, 186);border-radius:5px} QLineEdit:focus {border: 1.5px solid #796868}")
        self.entry_cpf.setObjectName("entry_cpf")
        self.text_cpf = QtWidgets.QLabel(self.usuario)
        self.text_cpf.setGeometry(QtCore.QRect(20, 110, 51, 16))
        self.text_cpf.setStyleSheet("color: rgb(255, 255, 255);")
        self.text_cpf.setObjectName("text_cpf")
        self.entry_email = QtWidgets.QLineEdit(self.usuario)
        self.entry_email.setEnabled(True)
        self.entry_email.setGeometry(QtCore.QRect(130, 140, 211, 20))
        self.entry_email.setStyleSheet("QLineEdit {background-color: rgb(186, 186, 186);border-radius:5px} QLineEdit:focus {border: 1.5px solid #796868}")
        self.entry_email.setInputMask("")
        self.entry_email.setObjectName("entry_email")
        self.text_email = QtWidgets.QLabel(self.usuario)
        self.text_email.setGeometry(QtCore.QRect(20, 140, 51, 16))
        self.text_email.setStyleSheet("color: rgb(255, 255, 255);")
        self.text_email.setObjectName("text_email")
        self.entry_nasc = QtWidgets.QDateEdit(self.usuario)
        self.entry_nasc.setGeometry(QtCore.QRect(130, 80, 110, 22))
        self.entry_nasc.setStyleSheet("QDateEdit {background-color: rgb(186, 186, 186);border-radius:5px} QDateEdit:focus {border: 1.5px solid #796868}")
        self.entry_nasc.setObjectName("entry_nasc")
        self.entry_celular = QtWidgets.QLineEdit(self.usuario)
        self.entry_celular.setEnabled(True)
        self.entry_celular.setGeometry(QtCore.QRect(130, 170, 211, 20))
        self.entry_celular.setStyleSheet("QLineEdit {background-color: rgb(186, 186, 186);border-radius:5px} QLineEdit:focus {border: 1.5px solid #796868}")
        self.entry_celular.setObjectName("entry_celular")
        self.text_celular = QtWidgets.QLabel(self.usuario)
        self.text_celular.setGeometry(QtCore.QRect(20, 170, 101, 16))
        self.text_celular.setStyleSheet("color: rgb(255, 255, 255);")
        self.text_celular.setObjectName("text_celular")
        self.text_funcao = QtWidgets.QLabel(self.usuario)
        self.text_funcao.setGeometry(QtCore.QRect(20, 200, 101, 16))
        self.text_funcao.setStyleSheet("color: rgb(255, 255, 255);")
        self.text_funcao.setObjectName("text_funcao")
        self.combo_funcoes = QtWidgets.QComboBox(self.usuario)
        self.combo_funcoes.setGeometry(QtCore.QRect(130, 200, 211, 22))
        self.combo_funcoes.setStyleSheet("QComboBox {background-color: rgb(186, 186, 186);border-radius:5px} QComboBox:focus {border: 1.5px solid #796868} QListView {background-color: rgb(186, 186, 186)}")
        self.combo_funcoes.setObjectName("combo_funcoes")
        self.combo_funcoes.addItems(["Administrador", "Moderador", "Usu√°rio"])
        self.bt_salvar = QtWidgets.QPushButton(self.usuario)
        self.bt_salvar.setGeometry(QtCore.QRect(510, 310, 75, 23))
        self.bt_salvar.setStyleSheet("\n"
"QPushButton {\n"
"background-color: rgb(210, 210, 210);\n"
"border-radius: 15px;\n"
"}\n"
":hover {\n"
"background-color: rgb(230, 230, 230);\n"
"}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("qtui/images/disquete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_salvar.setIcon(icon)
        self.bt_salvar.setObjectName("bt_salvar")
        self.bt_salvar.setEnabled(False)
        self.bt_excluir = QtWidgets.QPushButton(self.usuario)
        self.bt_excluir.setGeometry(QtCore.QRect(420, 310, 75, 23))
        self.bt_excluir.setStyleSheet("\n"
"QPushButton {\n"
"background-color: rgb(210, 210, 210);\n"
"border-radius: 15px;\n"
"}\n"
":hover {\n"
"background-color: rgb(230, 230, 230);\n"
"}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("qtui/images/lixo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_excluir.setIcon(icon1)
        self.bt_excluir.setObjectName("bt_excluir")
        self.bt_fechar = QtWidgets.QPushButton(self.usuario)
        self.bt_fechar.setGeometry(QtCore.QRect(330, 310, 75, 23))
        self.bt_fechar.setStyleSheet("\n"
"QPushButton {\n"
"background-color: rgb(210, 210, 210);\n"
"border-radius: 15px;\n"
"}\n"
":hover {\n"
"background-color: rgb(230, 230, 230);\n"
"}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("qtui/images/x.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_fechar.setIcon(icon2)
        self.bt_fechar.setObjectName("bt_fechar")
        Usuarios.setCentralWidget(self.centralwidget)

        self.tableWidget.doubleClicked.connect(self.tableDoubleClick)
        self.bt_fechar.clicked.connect(self.fecharTabUsuario)
        #self..textChanged.connect(self.doSomething)
        self.entry_nome.textChanged.connect(self.liberarBotaoSalvar)
        self.entry_cpf.textChanged.connect(self.liberarBotaoSalvar)
        self.entry_email.textChanged.connect(self.liberarBotaoSalvar)
        self.entry_celular.textChanged.connect(self.liberarBotaoSalvar)
        self.entry_nasc.dateChanged.connect(self.liberarBotaoSalvar)
        self.combo_funcoes.currentTextChanged.connect(self.liberarBotaoSalvar)
        self.bt_excluir.clicked.connect(self.excluir)
        self.bt_salvar.clicked.connect(self.salvar)

        self.carregarDados()

        self.retranslateUi(Usuarios)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Usuarios)

    def tableDoubleClick(self):
        if self.privLevel >= 3: # Tem acesso para excluir, editar e alterar fun√ß√£o - Administrador
            self.entry_nome.setEnabled(True)
            self.entry_celular.setEnabled(True)
            self.entry_cpf.setEnabled(True)
            self.entry_email.setEnabled(True)
            self.entry_nasc.setEnabled(True)
            self.combo_funcoes.setEnabled(True)
            self.bt_excluir.setEnabled(True)
        elif self.privLevel >= 2: # Tem acesso para editar - Moderador
            self.entry_nome.setEnabled(True)
            self.entry_celular.setEnabled(True)
            self.entry_cpf.setEnabled(True)
            self.entry_email.setEnabled(True)
            self.entry_nasc.setEnabled(True)
            self.combo_funcoes.setEnabled(False)
            self.bt_excluir.setEnabled(False)
        elif self.privLevel >= 1: # Tem acesso apenas para visualizar - Usu√°rio
            self.entry_nome.setEnabled(False)
            self.entry_celular.setEnabled(False)
            self.entry_cpf.setEnabled(False)
            self.entry_email.setEnabled(False)
            self.entry_nasc.setEnabled(False)
            self.combo_funcoes.setEnabled(False)
            self.bt_excluir.setEnabled(False)

        
        _translate = QtCore.QCoreApplication.translate
        self.tabWidget.addTab(self.usuario, "")

        user = self.datausuarios[self.tableWidget.currentRow()]
        self.usuario_editando = user
        i_uid = str(user[0])
        i_privLevel = int(user[1])

        i_usuario = str(user[2])
        i_nome = str(user[4])
        i_data_nascimento = datetime.strptime(str(user[5]), '%d/%m/%Y').date()
        i_cpf = str(user[6])
        i_email = str(user[7])
        i_numerocelular = str(user[8])

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.usuario), _translate("Usuarios", f"Usu√°rio - {i_usuario}"))
        self.entry_usuario.setText(_translate("Usuarios", i_usuario))
        self.entry_nome.setText(_translate("Usuarios", i_nome))
        self.entry_cpf.setText(_translate("Usuarios", i_cpf))
        self.entry_email.setText(_translate("Usuarios", i_email))
        self.entry_celular.setText(_translate("Usuarios", i_numerocelular))
        self.entry_nasc.setDate(i_data_nascimento)
        self.combo_funcoes.setCurrentText(self.dict_privLevels[i_privLevel])
        self.tabWidget.setCurrentIndex(1)
        self.bt_salvar.setEnabled(False)

    def fecharTabUsuario(self):
        self.tabWidget.removeTab(self.tabWidget.currentIndex())

    def liberarBotaoSalvar(self):
        self.bt_salvar.setEnabled(True)

    def excluir(self):
        botao_clicado = qtPopup("Confirma√ß√£o", "Tem certeza que deseja excluir esse usu√°rio?", "Question", True)
        if botao_clicado.lower() == "cancel":
            return
        with open('session.txt', 'r') as f:
            if f.read() == self.usuario_editando[2]:
                qtPopup("Erro ao excluir", "Voc√™ n√£o pode excluir seu pr√≥prio usu√°rio!", "Critical")
                return
            
        utils.dbQuery(f"DELETE FROM users WHERE usuario='{self.usuario_editando[2]}'")
        qtPopup("Exclu√≠do", "Usu√°rio exclu√≠do com sucesso!", "Information")
        self.tabWidget.removeTab(self.tabWidget.currentIndex())
        self.carregarDados()

    def salvar(self):
        botao_clicado = qtPopup("Confirma√ß√£o", "Tem certeza que deseja salvar as informa√ß√µes atualizadas?", "Question", True)
        if botao_clicado.lower() == "cancel":
            return
        
        t_cpf = self.entry_cpf.text().replace(".", "").replace("-", "")
        t_celular = int(self.entry_celular.text().replace("(", "").replace(")", "").replace("-", "").replace(" ", ""))
        
        if len(self.entry_nome.text().split()) < 2: # Valida√ß√£o de nome completo
            qtPopup("Erro ao atualizar", "Coloque um nome v√°lido!", "Warning")
            return
        if len(self.entry_cpf.text().strip()) != 14: # Valida√ß√£o de CPF
            qtPopup("Erro ao atualizar", "Coloque um CPF v√°lido!", "Warning")
            return
        if not EmailCheck(self.entry_email.text()): # Valida√ß√£o de Email
            qtPopup("Erro ao atualizar", "Coloque um e-mail v√°lido!", "Warning")
            return
        if len(self.entry_celular.text().strip()) != 15: # Valida√ß√£o de N√∫mero
            qtPopup("Erro ao atualizar", "Coloque um n√∫mero de celular v√°lido!", "Warning")
            return
        
        usuario_editando = self.usuario_editando[2]
        
        if utils.dbQuery(f"SELECT * FROM users WHERE(cpf='{t_cpf}' AND usuario!='{usuario_editando}')") is not None: # Valida√ß√£o de CPF - se j√° existe
            qtPopup("Erro ao registrar", "Esse CPF j√° est√° registrado, tente novamente!", "Warning")
            return
        if utils.dbQuery(f"SELECT * FROM users WHERE(email='{self.entry_email.text().strip()}' AND usuario!='{usuario_editando}')") is not None: # Valida√ß√£o de E-mail - se j√° existe
            qtPopup("Erro ao registrar", "Esse e-mail j√° est√° registrado, tente novamente!", "Warning")
            return
        if utils.dbQuery(f"SELECT * FROM users WHERE(numerocelular='{t_celular}' AND usuario!='{usuario_editando}')") is not None: # Valida√ß√£o de N√∫mero - se j√° existe
            qtPopup("Erro ao registrar", "Esse n√∫mero de celular j√° est√° registrado, tente novamente!", "Warning")
            return
        
        with open('session.txt', 'r') as f:
            if f.read() == self.usuario_editando[2] and self.dict_privLevels[self.privLevel] != self.combo_funcoes.currentText():
                qtPopup("Erro ao atualizar", "Voc√™ n√£o pode alterar a fun√ß√£o do seu pr√≥prio usu√°rio!", "Critical")
                return
            
        utils.dbQuery(f"UPDATE users SET nome='{self.entry_nome.text().strip()}', datanascimento='{self.entry_nasc.text()}', cpf='{t_cpf}', email='{self.entry_email.text().strip()}', numerocelular='{t_celular}', privLevel='{self.dict_privLevels[self.combo_funcoes.currentText()]}' WHERE usuario='{usuario_editando}'")
        qtPopup("Salvo", "Informa√ß√µes do usu√°rio atualizadas com sucesso!", "Information")
        self.tabWidget.removeTab(self.tabWidget.currentIndex())
        self.carregarDados()
    

    def carregarDados(self):
        with open('session.txt', 'r') as f:
            self.privLevel = int(utils.dbQuery(f"SELECT privLevel FROM users WHERE usuario='{f.read()}'")[0][0])

        self.dict_privLevels = {1:"Usu√°rio",2:"Moderador",3:"Administrador","Usu√°rio":1,"Moderador":2,"Administrador":3}

        data = utils.dbQuery(f"SELECT * FROM users")
        self.datausuarios = data
        row = 0
        self.tableWidget.setRowCount(len(data))
        for user in data:
            usuario = user[2]
            nome = user[4]
            data_nascimento = user[5]
            cpf = user[6]
            email = user[7]
            self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem(str(usuario)))
            self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(str(nome)))
            self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem(str(data_nascimento)))
            self.tableWidget.setItem(row, 3, QtWidgets.QTableWidgetItem(str(cpf)))
            self.tableWidget.setItem(row, 4, QtWidgets.QTableWidgetItem(str(email)))
            row=row+1
        
        

    def retranslateUi(self, Usuarios):
        _translate = QtCore.QCoreApplication.translate
        Usuarios.setWindowTitle(_translate("Usuarios", "Usu√°rios - CRUD"))
        self.tableWidget.setSortingEnabled(False)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Usuarios", "Usu√°rio"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Usuarios", "Nome"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Usuarios", "Data de Nascimento"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Usuarios", "CPF"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Usuarios", "E-mail"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.lista), _translate("Usuarios", "Lista de usu√°rios"))
        self.text_usuario.setText(_translate("Usuarios", "Usu√°rio: "))
        self.text_nome.setText(_translate("Usuarios", "Nome completo:"))
        self.text_data_nasc.setText(_translate("Usuarios", "Data de nascimento:"))
        self.entry_cpf.setInputMask(_translate("Usuarios", "999.999.999-99"))
        self.entry_celular.setInputMask(_translate("Usuarios", "(99) 99999-9999"))
        self.text_cpf.setText(_translate("Usuarios", "CPF: "))
        self.text_email.setText(_translate("Usuarios", "E-mail:"))
        self.text_celular.setText(_translate("Usuarios", "N√∫mero de celular:"))
        self.text_funcao.setText(_translate("Usuarios", "Fun√ß√£o:"))
        self.bt_salvar.setText(_translate("Usuarios", "  Salvar"))
        self.bt_excluir.setText(_translate("Usuarios", "  Excluir"))
        self.bt_fechar.setText(_translate("Usuarios", "  Fechar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.usuario), _translate("Usuarios", "Usu√°rio - NOME USU√ÅRIO"))

def showWindow():
    window = QtWidgets.QMainWindow()
    ui = UiObject()
    ui.setupUi(window)
    window.show()